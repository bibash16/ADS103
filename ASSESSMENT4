#include <iostream>
#include <string>
#include <stdlib.h>
#define GRID_SIZE 3
using namespace std;
class Game {
private:
	char grid[GRID_SIZE][GRID_SIZE];

public:

	void check_for_wins() {

		const char* winning_moves[8] = {
			"123",
			"456",
			"789",
			"147",
			"258",
			"369",
			"159", 
			"753",
		};

		for (int i = 0; i < 8; i++) {

			bool winner = true;
			char previous_grid = '0';
			const char* winning_move = winning_moves[i];

			for (int index = 0; index < GRID_SIZE; index++) {
				char character = winning_move[index];

				int entered_number = character - '0';
				int grid_space = entered_number - 1;

				int row = grid_space / GRID_SIZE;
				int col = grid_space % GRID_SIZE;
				
				char grid_char = grid[row][col];

				if (previous_grid == '0') {
					previous_grid = grid_char;

				}
				else if (previous_grid == grid_char) {
					continue;
				}
				else {
					winner = false;
					break;
				}
			}
			if (winner) {
				puts("***!! WE HAVE A WINNER !!!****");
				printf(" It seems %c wins!! Grats!!\n", previous_grid);
				exit(0);
				break;
			}
		}
	}

	void ask_turn() {
		string input;
		while (true) {
			puts("Please choose where you would like to play! :)");
			getline(cin, input);
			if (input != "") {
				char entered = input.c_str()[0];
				if (entered >= '1' && entered <= '9') {
					int entered_number = entered - '0';
					int index = entered_number - 1;

					int row = index / 3;
					int col = index % 3;

					char grid_position = grid[row][col];

					if (grid_position == 'X' || grid_position == 'O') {
						puts("That move is invalid, please choose another.");
					}
					else {
						grid[row][col] = 'X';
						break;
					}
				}
				else{
					puts("Please pick a number from 1 to 9. :) ");
				}
			}
			else {
				puts("You must enter a number!");
			}
		}
	}

	void computer_player_turn() {
		while (true) {
			int computer_choice = (rand() % 9) + 1;
			
			int row = (computer_choice - 1) / GRID_SIZE;
			int col = (computer_choice - 1) % GRID_SIZE;

			char grid_position = grid[row][col];

			if (grid_position == 'X' || grid_position == 'O') {
				continue;
			}
			else {
				printf("Computer chooses : %d \n", computer_choice);
				grid[row][col] = 'O';
				break;
			}

		}
	}

	void gen_grid() {
		int number = 1;
		for (int x = 0; x < GRID_SIZE; x++) {
	    for (int y = 0; y < GRID_SIZE; y++) {
		grid[x][y] = to_string(number).c_str()[0];
		number += 1;

			}
		}
	}

	void show_grid() {
		cout << "\n !!! TIC TAC TOE !!! \n";
		cout << "\t Player = X\n";
		cout << "\t Computer = O\n";
		cout << "\n    -------------\n";
		for (int x = 0; x < GRID_SIZE; x++) {
			printf("    |");
			for (int y = 0; y < GRID_SIZE; y++) {
				printf(" %c |", grid[x][y]);
			}
			printf("\n    -------------\n");
		}
	}

	Game() {
		gen_grid();

		show_grid();
		check_for_wins();
		while ( true){
        ask_turn();
        check_for_wins();

		computer_player_turn();
		show_grid();
		check_for_wins();
		}	
	}
};

int main(int argc, char *argv[]){
	int dec;
	cout << "\n Welcome to Tic Tac Toe!!!! " << endl;
	cout << "  What would you like to do?? \n" << endl;
	cout <<  "\t1. Play Game" << endl;
	cout << "\t2. Exit" << endl;
	cin >> dec;
	if (dec == 1){
       Game game;
	}
	else if (dec == 2) {
		cout << "Come Play again next time! :D";
		exit(0);
	}
	else {
		cout << "\n Invalid number. \n" << endl;
	}
	return 0;
}
